====================
Guía de Vue.js by dM
====================

============
Introducción
============

¿Qué es Vue.js?

Vue (pronunciado /vjuː/ en inglés, como view) es un framework progresivo para
construir interfaces de usuario. A diferencia de otros frameworks monolíticos,
Vue está diseñado desde el inicio para ser adoptado incrementalmente.
La biblioteca principal se enfoca solo en la capa de la vista, y es muy simple
de utilizar e integrar con otros proyectos o bibliotecas existentes. Por otro
lado, Vue también es perfectamente capaz de soportar aplicaciones sofisticadas
de una sola página (en inglés single-page-application o SPA) cuando se utiliza
en combinación con herramientas modernas y librerías compatibles.

Vue combina buenas prácticas de Angular y de React.

================================
Progresividad de Vue y sus capas
================================

La progresividad de Vue se ve a través de varias capas:

-La capa más básica es el render declarativo, render significa dibujar elementos
en la pantalla del navegador y declarativo significa que la sintaxis es muy
fácil de entender.

-La siguiente capa sería el sistema de componentes, aquí ya se está hablando de
piezas de interfaz como por ejemplo la tarjeta de un producto, un menú de
navegación, un formulario, esos ya son componentes, piezas de la interfaz que se
pueden combinar para crear toda tu aplicación.

-La siguiente capa es el enrutamiento en el cliente, es decir tener diferentes
direcciones en tu aplicación, por ejemplo el inicio, el login, etc. Ya tu vas
creando tus diferentes URL para las diferentes vistas de tu aplicación, para las
paginas internas.

-La siguiente capa es el manejo de estado a gran escala, el estado es el
conjunto de datos en un momento específico de la aplicación, el ejemplo más
sencillo es un usuario que no ha agregado un producto a un carrito de compra
por ejemplo, ese es el estado, en el momento que un usuario agrega un producto
al carrito el estado cambia, porque ahora el carrito tiene un producto con un
precio y un total, entonces si el usuario cambia de página porque está viendo
otros productos, ese carrito debe mantenerse con ese producto, con ese precio
sin importar por donde se mueva el usuario, ese es el estado y lo podemos
manejar con Vue.

-La siguiente es Build system, Vue te permite empaquetar un proyecto para
mandarlo a producción de diferentes maneras.

-La última capa es la de Persistencia de datos entre cliente y servidor es decir
poder tener datos que se mantienen en una aplicación.

Las capas van creciendo creciendo y esa es la progesividad de las aplicaciones.

=========
Empezando
=========

La guia oficial asume un conocimiento intermedio de HTML, CSS y JavaScript. Si
eres totalmente nuevo en el desarrollo de frontend, puede no ser la mejor idea
empezar a utilizar un framework - ¡aprende los conceptos básicos y luego regresa
aquí! La experiencia previa con otros frameworks ayuda, pero no es obligatoria.

===========
Instalación
===========

Inclusión directa con <script>
==============================

La manera más sencilla de probar Vue.js es usando el ejemplo “hola mundo” creado
un archivo .html e incluir Vue con un llamado a un enlace CDN:

<!-- development version, includes helpful console warnings -->
<script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>

NPM
===

NPM es el método de instalación recomendado para construir aplicaciones a gran
escala con Vue. Este combina perfectamente con empaquetadores de módulos, tales
como Webpack o Browserify. Vue también ofrece herramientas para la creación de
componentes de un solo archivo (en inglés Single-File Components).

$ npm install vue

=================================
Vue.js devtools Firefox extensión
=================================

Cuando use Vue, le recomendamos que también instale Vue Devtools en su navegador
lo que le permite inspeccionar y depurar sus aplicaciones de Vue de una manera
más amigable:

https://github.com/vuejs/vue-devtools#vue-devtools

https://addons.mozilla.org/en-US/firefox/addon/vue-js-devtools/

=======================
Renderizado declarativo
=======================

En el núcleo de Vue.js se encuentra un sistema que nos permite renderizar
declarativamente datos en el DOM utilizando una sintaxis de plantillas directa:

El siguiente es un código html, bastante sencillo, posee una línea para llamar a
Vue en nuestra página web <script src="https://unpkg.com/vue"></script> no
significa que lo estemos instalando, también tenemos un "div" con el "id" = a
"app" que usaremos como punto de montaje y luego tenemos un pequeño script donde
instanciamos Vue con "new Vue" y le pasamos un objeto con el atributo "el"
donde ponemos el selector o referencia a "#app" del punto de montaje declarado
primero, de esta manera estamos diciento que esta instancia de Vue estará
conectada con ese punto de montaje, así se unen, luego tenemos el atributo data
se podrá imprimir luego en el html, etnonces como tengo la propiedad "message"
significa que voy a imprimir el contenido en "{{ message }}".

Dentro de esa instancia de Vue ya se podrían poner eventos, poner alguna lógica
pero es javascript convencional.

El ejemplo sería:

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue app</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
  <div id="app">
    {{ message }}
  </div>

  <script>
    var app = new Vue({
      el: '#app',
      data: {
        message: 'Hello Vue!'
      }
    })
  </script>
</body>
</html>

Esto nos muestra el mensaje Hello Vue! en el navegador.

=====================
Hola mundo en Vuejs 3
=====================

<!DOCTYPE html>
<html>
<head>
  <title>My first Vue app</title>
  <script src="https://unpkg.com/vue@next"></script>
</head>
<body>
  <div id="app">
    {{ message }}
  </div>

  <script>
    var app = Vue.createApp({
      data() {
        return {
          message: "Hello World!"
        };
      }
    }).mount("#app");
  </script>
</body>
</html>

=================
Directivas de Vue
=================

Son como una herencia que toma Vue de Angular 1 y son atributos en el html o el
template que insertan lógica de manera sencilla, siempre empiezan con "v-".

Ejemplos:

v-for: Lo que hace es recorrer una lista de elementos, es un ciclo for.

v-on: Que lo que hace es escuchar un evento, nativo o creado por el usuario.

v-bind: Vincula un atributo HTML a un valor que tengamos en nuestro modelo.
Encadena datos, es decir que establece comunicación con los datos que haya en el
componente asociado.

v-if: Un condicional que inyecta un elemento al DOM según la condición.

v-else: El else de esa condicional.

v-show: Para mostrar u ocultar elementos usando la propiedad display de CSS.

v-model: Permite enlazar un elemento con alguna propiedad de un estado. Permite
la vinculación bidireccional entre los datos del dom y el estado de la
aplicación.

v-text: Esta directiva permite hacer un trabajo similar a la interpolación de
texto con la diferencia que la interpolación puede ser usada para renderizar un
fragmento del texto de un elemento, la directiva v-text renderizará todo el
contenido.

v-html: Esta directiva permite imprimer código html en el elemento en cuestión.
Es el equivalente al innerHTML de JavaScript.

Y existen más directivas en Vue...

Ejemplo de la directiva v-bind
==============================

Enlace de atributos
===================

El enlace de atributos (attribute binding) es una característica de Vue que
permite enlazar atributos de elementos HTML con el valor de una propiedad.

La forma para generar la imagen de manera dinámica, o más bien, enlazarla desde
la data de Vue no es igual a la forma de imprimir un mensaje común con
interpolación como es el caso de la variable message. Para esto, Vue nos
proporciona la directiva v-bind. La sintaxis para esto sería la siguiente:

v-bind:attribute="property"

En donde attribute es el atributo del elemento HTML y property es la propiedad
en Vue.js. De acuerdo a esto, la forma de enlazar el atributo src de la imagen
con Vue sería de la siguiente manera.

En este punto, generalizando un poco la sintaxis en realidad permitiría no solo
colocar el valor de una propiedad en el contexto sino toda una expresión.

v-bind:attribute="expression"

Finalmente, Vue.js nos facilita un poco la vida agregando un shorthand para esta
directiva de la siguiente manera.

:attribute="expression"

-----

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Vue example</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
<div id="app">
  <img v-bind:src="image" width="80" /> {{ $message }}
</div>
<script>
var app = new Vue({
  el: '#app',
  data: {
    message: 'Vue.js',
    image: 'https://blog.pleets.org/img/articles/vuejs-icon.png'
  }
});
</script>
</body>
</html>

Fuente
======

https://blog.pleets.org/article/enlace-de-atributos-en-vuejs

Ejemplo de la directiva v-on
============================

Si queremos que un elemento responda a un evento click, por ejemplo, debemos
utilizar la directiva v-on:click o de la forma reducida @click seguida del
metodo manejador asociado:

<button @click="miMetodo()">Haz Click</button>

Al contrario de React, donde utilizamos el método render() del componente,
sintaxis JSX para definir la vista y mezclamos cierta lógica al permitirnos
utilizar JavaScript. En Vue, al igual que Angular, tenemos separado Vista de
Controlador utilizando puro HTML + directivas para la vista y JavaScript para la
lógica.

Ejemplo:

<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>Component vue example</title>
    <script src="https://unpkg.com/vue"></script>
  </head>
  <body>
    <div id="app"></div>
    <script>
      const app = new Vue({
        el: '#app',
        template: `
          <div>
            <!--button v-on:click="showAlert()">Push me</button-->
            <button @click="showAlert()">Push me</button>
          </div>
        `,
        data: {
        },
        methods: {
          showAlert: function () {
            alert("Hello!");
          }
        }
      })
    </script>
  </body>
</html>

Otro ejemplo
============

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue component</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
<div id="app">
  <p>{{ message }}</p>
  <button v-on:click="reverseMessage">Reverse Message</button>
</div>

<script>
new Vue({
  el: '#app',
  data: {
    message: 'Hello Vue.js!'
  },
  methods: {
    reverseMessage: function () {
      this.message = this.message.split('').reverse().join('')
    }
  }
})
</script>
</body>
</html>

Ejemplo de v-for
================

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue app</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
  <div id="app">
    <ul>
      <li v-for="name in names">
        {{ name }}
      </li>
    </ul>
  </div>

  <script>
    var app = new Vue({
      el: '#app',
      data: {
        names: ["José","Pedro","Juan","María"]
      }
    })
  </script>
</body>
</html>

Otro ejemplo
============

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue app</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
  <div id="app">
    <ul>
      <li v-for="name in names">
        {{ name }}
      </li>
    </ul>
    <ul>
      <li v-for="dog in dogs">
        {{ dog }}
      </li>
    </ul>
  </div>

  <script>
    var app = new Vue({
      el: '#app',
      data: {
        names: ["José","Pedro","Juan","María"],
        dogs: ["Alfie","Solomons"]
      }
    })
  </script>
</body>
</html>

Ejemplo con 2 puntos de montaje
===============================

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue app</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
  <div id="list1">
    <ul>
      <li v-for="name in names">
        {{ name }}
      </li>
    </ul>
  </div>

  <br />

  <div id="list2">
    <ul>
      <li v-for="color in colors">
        {{ color }}
      </li>
    </ul>
  </div>

  <script>
    var list1 = new Vue({
      el: '#list1',
      data: {
        names: ["José","Pedro","Juan","María"]
      }
    })

    var list2 = new Vue({
      el: '#list2',
      data: {
        colors: ["Blue","Orange","Red","Green"]
      }
    })
  </script>
</body>
</html>

Otro ejemplo
============

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue app</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
  <div id="app">
    <ul>
      <li v-for="(show, index) in tvshows" v-bind:key="index">
        {{ show.name }} ({{ show.seasons }} temporadas)
      </li>
    </ul>
  </div>

  <script>
    var app = new Vue({
      el: '#app',
      data: {
        tvshows: [
          { name: 'Serie 1', seasons: 3 },
          { name: 'Serie 2', seasons: 5 },
          { name: 'Serie 3', seasons: 2 },
        ]
      }
    })
  </script>
</body>
</html>

========================
Ejemplo de v-if y v-else
========================

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue app</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
  <div id="app">
    <ul>
      <div v-if="show">
        <li v-for="(show, index) in tvshows" v-bind:key="index">
          {{ show.name }} ({{ show.seasons }} temporadas)
        </li>
      </div>
      <div v-else>
        No data
      </div>
    </ul>
  </div>

  <script>
    var app = new Vue({
      el: '#app',
      data: {
        //show: false,
        show: true,
        tvshows: [
          { name: 'Serie 1', seasons: 3 },
          { name: 'Serie 2', seasons: 5 },
          { name: 'Serie 3', seasons: 2 },
        ]
      }
    })
  </script>
</body>
</html>

Ejemplo de eventos
==================

<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>Component vue example</title>
    <script src="https://unpkg.com/vue"></script>
  </head>
  <body>
    <div id="app"></div>
    <script>
    const app = new Vue({
      el: '#app',
      template: `
        <div>

          <div v-if="show">
            <ul>
              <li v-for="(course, index) in courses" v-bind:key="index">
                <a v-bind:href="course.url"> {{ course.name }} </a>
              </li>
            </ul>
          </div>
          <button @click="toggleShow()">Show/Hide</button>

        </div>
      `,
      data: {
        show: true,
        courses: [
          { name: "PHP", url: 'https://www.youtube.com/1' },
          { name: "Python", url: 'https://www.youtube.com/2' },
          { name: "JavaScript", url: 'https://www.youtube.com/3' },
        ],
      },
      methods: {
        toggleShow: function () {
          this.show = !this.show
        }
      }
    })
    </script>
  </body>
</html>

Ejemplo de v-model
==================

<!--
Vue también proporciona la directiva v-model que hace que la vinculación
bidireccional entre los datos del formulario y el estado de la aplicación sea
muy sencilla.
-->
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue component</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
<div id="app-6">
  <p>{{ message }}</p>
  <input v-model="message">
</div>

<script>
var app6 = new Vue({
  el: '#app-6',
  data: {
    message: 'Hello Vue!'
  }
})
</script>
</body>
</html>

Otro ejemplo
============

=====================================
Enlace de datos doble o bidireccional
=====================================

Veremos cómo realizar un enlace doble de datos, el cuál nos permitirá actualizar
propiedades desde el HTML hacia Vue y viceversa.

Lo primero que hay que notar, es que este tipo de enlace funciona en los
elementos de formulario input, textarea y select. Antes de entrar en detalle en
cada uno de ellos veamos la directiva que hace posible el enlace bidirecciona.

v-model="property"

La directiva v-model permite realizar un enlace doble de datos. La sintaxis es
intuitita por si misma, simplemente basta asignar la propiedad del modelo a la
directiva.

Siempre que cambie el valor de la propiedad en la instancia de Vue se
actualizará el valor del input. De manera análoga, cada vez que cambie el valor
del input, se actualizará el valor de la propiedad en la instancia de Vue.

------

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Vue example</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
<div id="app">
  <input type="text" v-model="firstName" />
  <p>
    Your first name is {{ firstName }}
  </p>
</div>
<script>
var app = new Vue({
  el: '#app',
  data: {
    firstName: 'Steve'
  }
});
</script>
</body>
</html>

Otro ejemplo
============

<!-- Sumar dos números con evento click -->
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue app</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
<div id="app">
  Type the first number:
  <input type="number" v-model.number="n1">
  <br />
  Type the second number:
  <input type="number" v-model.number="n2">
  <br />
  <button v-on:click="sum = n1 + n2">Sum</button>
  <br />
  The sum is: {{ sum }}
</div>

<script>
var vue = new Vue({
 el: "#app",
 data: {
   n1: 0,
   n2: 0,
   sum: 0
 }
});
</script>
</body>
</html>

Otro ejemplo usando métodos
===========================

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue app</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
<div id="app">
 Type the first number:
 <input type="number" v-model.number="n1"><br />
 Type the second number:
 <input type="number" v-model.number="n2"><br />
 <button v-on:click="sum">Sum</button><br />
 The sum is: {{ ans }}
</div>

<script>
var vue = new Vue({
 el: "#app",
 data: {
   n1: 0,
   n2: 0,
   ans: 0
 },
 methods: {
  sum: function() {
    this.ans = this.n1 + this.n2;
  }
 }
});
</script>
</body>
</html>

Otro ejemplo de métodos con parámetros
======================================

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue app</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
<div id="app">
 Type the first number:
 <input type="number" v-model.number="n1"><br />
 Type the second number:
 <input type="number" v-model.number="n2"><br />
 <button v-on:click="sum(n1,n2)">Sum</button><br />
 The sum is: {{ ans }}
</div>

<script>
var vue = new Vue({
 el: "#app",
 data: {
   n1: 0,
   n2: 0,
   ans: 0
 },
 methods: {
   sum: function(a, b) {
     this.ans = a + b;
   }
 }
});
</script>
</body>
</html>

Otro ejemplo
============

Una de las cosas interesantes de los enlaces de Vue, es que nos permite enlazar
los valores con respecto a una propiedad. Sí, eso ya lo hemos dicho antes pero
tal vez no hayas visto algunas de las posibilidades que esto conlleva. Cuando
realizas una selección de elementos mutuamente excluyentes utilizamos un input
de tipo radio. Para indicar que se trata del mismo contexto se coloca el valor
del mismo atributo name para todos. En Vue, no hace falta realizar esto ya que
con la directiva se obtiene el mismo efecto.

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Vue example</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
<div id="app">
  <input type="radio" v-model="profile" value="admin" />
  <label>Admin</label><br />
  <input type="radio" v-model="profile" value="guest" />
  <label>Guest</label><br />
  <p>
    Your profile is {{ profile }}
  </p>
</div>
<script>
var app = new Vue({
  el: "#app",
  data: {
    profile: 'admin'
  }
});
</script>
</body>
</html>

Otro ejemplo
============

El siguiente ejemplo muestra una selección múltiple en donde un usuario debe
escoger cero o más intereses.

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Vue example</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
<div id="app">
  <input type="checkbox" v-model="feeds" value="technology" />
  <label>Technology</label><br />
  <input type="checkbox" v-model="feeds" value="traveling" />
  <label>Traveling</label><br />
  <input type="checkbox" v-model="feeds" value="swimming" />
  <label>Swimming</label><br />
  <p>
    Interests: {{ feeds }}
  </p>
</div>
<script>
var app = new Vue({
  el: "#app",
  data: {
    feeds: ["technology"]
  }
});
</script>
</body>
</html>

Otro ejemplo
============

El siguiente ejemplo muestra un input de tipo checkbox sin el atributo value
inicial.

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Vue example</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
<div id="app">
  <label>Enabled</label>
  <input type="checkbox" v-model="enabled" />
  <p>
    User is {{ enabled ? 'enabled' : 'disabled' }}
  </p>
</div>
<script>
var app = new Vue({
  el: "#app",
  data: {
    enabled: true
  }
});
</script>
</body>
</html>

Otro ejemplo
============

Siempre que cambie el valor de la propiedad en la instancia de Vue se
actualizará el valor del textarea. De manera análoga, cada vez que cambie el
texto en el textarea, se actualizará el valor de la propiedad en la instancia de
Vue.

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Vue example</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
<div id="app">
  <textarea v-model="content"></textarea>
  <pre>{{ content }}</pre>
</div>
<script>
var app = new Vue({
  el: "#app",
  data: {
    content: "Hello\nWorld"
  }
});
</script>
</body>
</html>

Otro ejemplo
============

En el caso de los elementos select la directiva debe colocarse como atributo en
dicho elemento y no en los ítems que pudiese tener. Veamos el siguiente ejemplo.

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Vue example</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
<div id="app">
  <label>How many years did you take at college?</label>
  <br />
  <select v-model="years">
    <option value="1">one</option>
    <option value="2">two</option>
    <option value="3">three</option>
    <option value="4">four</option>
    <option value="5">five</option>
  </select>
  <p>You took {{ years }} years.</p>
</div>
<script>
var app = new Vue({
  el: "#app",
  data: {
    years: 3
  }
});
</script>
</body>
</html>

Ejemplo de v-show
=================

Esta directiva es utilizada para mostrar de manera condicional un elemento HTML.
Su uso es muy similar a la directiva v-if puesto que acepta una expresión y toma
su valor booleano para determinar si se muestra o no dicho elemento.

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue app</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
<div id="app">
 Product X
 <br />
 <input type="number" v-model.number="items">
 <br />
 <p v-show="hasItems()">
   You order has {{ items }} items
 </p>
</div>

<script>
var app = new Vue({
  el: "#app",
  data: {
    items: 0
  },
  methods: {
    hasItems: function() {
      return this.items > 0;
    }
  }
});
</script>
</body>
</html>

Ejemplo de v-text
=================

Esta directiva permite hacer un trabajo similar a la interpolación de texto con
la diferencia que la interpolación puede ser usada para renderizar un fragmento
del texto de un elemento, la directiva v-text renderizará todo el contenido.
Vemos un ejemplo.

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue app</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
<div id="app">
  <p>Hello {{ message }}</p>
  <p v-text="greeting"></p>
</div>
<script type="text/javascript">
var app = new Vue({
  el: "#app",
  data: {
    message: "World",
    greeting: "Hello World"
  }
});
</script>
</body>
</html>

Ejemplo de v-html
=================

Esta directiva permite imprimer código html en el elemento en cuestión. Es el
equivalente al innerHTML de JavaScript. Veamos un ejemplo.

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue app</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
<div id="app">
  <p v-html="greeting"></p>
</div>
<script type="text/javascript">
var app = new Vue({
  el: "#app",
  data: {
    greeting: "<h1>Hello World</h1>"
  }
});
</script>
</body>
</html>

Esta directiva delegará la impresión del HTML al navegador sin realizar algún
renderizado a priori, es decir, no se puede utilizar directivas de Vue en el
código HTML que se desea imprimir.

=========================
Anatomía de un componente
=========================

El equipo de Vue y de Webpack han creado una plantilla que con la extensión de
fichero .vue podemos tener nuestro HTML, CSS y código JavaScript en un único
archivo.

Ésto es muy poderoso porque unimos 2 mundos. En React tenemos todo en un mismo
fichero, pero implica que personas del equipo de diseño y/o maquetacion
necesitaran saber React y JSX para poder añadir estilos y diseñar el layout de
las vistas.

Un componente contiene 3 partes principales:

-template.
-script.
-style.

En Vue puedes crear un fichero .vue de la siguiente forma

<template>
// Aquí va el código HTML
</template>

<script>
// Aquí va el código Javascript, puedes usar Babel, TypeScript,...)
</script>

<style>
// Aquí va el código CSS, puedes usar stylus, Sass, Less, etc...
</style>

=================================
Tipos de Web Components en Vue.js
=================================

Vue cuenta con dos tipos de componentes:

-Componentes Locales: son archivos con extensión .vue que el navegador por sí
solo no puede comprender y por ende es necesario del uso de herramientas como
Web Pack. Son bastante útiles para una aplicación web escalable por su sencillez
de mantenimiento.

-Componentes Globales: No necesitan archivos con extensión .vue, pueden ser
accedidos desde cualquier parte del código pero no se aconseja su uso en
aplicaciones web grandes por razones de mantenimiento. Son los más sencillos de
aprender.

===============================
Cómo crear un componente en Vue
===============================

Vue tiene un API para crear Componentes. No sigue el estándar de la W3C de los
WebComponents, pero el estilo es muy similar y puedes utilizar templates para
ello.

En éste tutorial vamos a crear un pequeño componente reutilizable que muestra la
información de una película: Su título y una imagen.

Para ello, creamos un fichero index.html que contendrá el elemento raíz #app
dónde colocaremos nuestra aplicación de Vue, el script con la librería y otro
script más dónde tendremos nuestro código:

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue component</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
  <div id="app"></div>
  <script src="app.js"></script>
</body>
</html>

A continuación creamos un fichero app.js al mismo nivel que index.html para que
el enlace del <script> funcione correctamente.

Aquí vamos a crear el componente <movie-card> e instanciar la aplicación de Vue.

Primero debemos crear el componente para que el código se interprete
correctamente. Si instanciamos antes la app de Vue y luego el componente
tendremos errores porque Vue no lo reconocerá.

Para crear un componente tenemos que usar la función Vue.component que recibe un
string con el nombre de nuestro componente, que será el nombre que tendrá el
elemento en el DOM, y un objeto de configuración que contendrá el nombre de las
props (Propiedades que recibe), el template, datos, métodos, etc...

Para crear un componente movie-card escribimos lo siguiente:

Vue.component('movie-card', {
  props: ['image', 'title'],
  template: `
    <div>
      <img width="100" v-bind:src="image" />
      <h2>{{ title }}</h2>
    </div>
  `,
})

El componente recibirá como propiedades una image y un title, y su aspecto en el
DOM será el de un <div> que contiene un elemento <img> que mostrará la imagen y
otro h2 que mostrará el título de la película.

Para ver el componente en acción, podemos hacer varias cosas. Como primera
opción, podemos insertar el componente <movie-card> en el HTML dentro del
<div id="app"> dónde tenemos instanciado Vue.

Para instanciar Vue, en el código de app.js justo debajo del componente que
acabamos de crear, escribimos lo siguiente:

new Vue({
  el: '#app'
})

Y así en index.html podemos escribir lo siguiente:

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue component</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
  <div id="app">
    <movie-card title="Regreso al Futuro" image="http://es.web.img3.acsta.net/pictures/14/04/03/13/45/034916.jpg"></movie-card>
  </div>
  <script src="app.js"></script>
</body>
</html>

Esto nos mostraría la imagen junto al título de la película en el navegador.
Pero si queremos mostrar varias <movie-card> cuyos datos obtengamos a través de
un API externo u otro servicio, sólo con esto no se podría.

Utilizando un v-for en este ejemplo
===================================

En la instancia de Vue, utilizaremos la propiedad data para emplear un array de
objetos con la información de varias películas.

El objeto movies contiene objetos con atributos title y image.

new Vue({
  el: '#app',
  data: {
    movies: [
      { title: 'Regreso al Futuro', image: 'http://es.web.img3.acsta.net/pictures/14/04/03/13/45/034916.jpg' },
      { title: 'Matrix', image: 'http://t0.gstatic.com/images?q=tbn:ANd9GcQq3pIz-aKgkmYX1dJ-EL-AlHSPcOO7wdqRIJ5gJy9qNinXpmle' },
      { title: 'Interestellar', image: 'http://t1.gstatic.com/images?q=tbn:ANd9GcRf61mker2o4KH3CbVE7Zw5B1-VogMH8LfZHEaq3UdCMLxARZAB' }
    ]
  }
})

De esta forma podemos acceder a estos datos dentro de Vue, y lo siguiente que
tenemos que hacer es pintarlos en el html.

Para ello, tendríamos que iterar por todos los elementos de éste array y pintar
un componente <movie-card> por cada uno de ellos.

Eso lo vamos a conseguir con la directiva v-for que hace precisamente eso, y
sería tan sencillo como lo siguiente en el fichero index.html:

<div id="app">
  <movie-card v-for="(movie, index) in movies"
    v-bind:key="index"
    v-bind:title="movie.title"
    v-bind:image="movie.image">
  </movie-card>
</div>

Cada elemento se va a llamar "movie" y tiene un "index" representa la posición
en el array del elemento que estamos mostrando en ese momento.

"movie.title" va a hacer referencia a la propiedad title dentro del objeto, al
igual que "movie.image"

El atributo "key" se agrega para que haya más eficiencia al momento de
renderizar los elementos.

Ejemplo completo:

app.js

Vue.component('movie-card', {
  props: ['image', 'title'],
  template: `
    <div>
      <img width="100" v-bind:src="image" v-bind:alt="title"/>
      <h2>{{ title }}</h2>
    </div>
  `,
})

new Vue({
  el: '#app',
  data: {
    movies: [
      { title: 'Regreso al Futuro', image: 'http://es.web.img3.acsta.net/pictures/14/04/03/13/45/034916.jpg' },
      { title: 'Matrix', image: 'http://t0.gstatic.com/images?q=tbn:ANd9GcQq3pIz-aKgkmYX1dJ-EL-AlHSPcOO7wdqRIJ5gJy9qNinXpmle' },
      { title: 'Interestellar', image: 'http://t1.gstatic.com/images?q=tbn:ANd9GcRf61mker2o4KH3CbVE7Zw5B1-VogMH8LfZHEaq3UdCMLxARZAB' }
    ]
  }
})

index.html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue component</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
  <div id="app">
    <movie-card v-for="(movie, index) in movies"
      v-bind:key="index"
      v-bind:title="movie.title"
      v-bind:image="movie.image">
    </movie-card>
  </div>
  <script src="app.js"></script>
</body>
</html>

-----

Si se quiere, en lugar de escribir esto en el HTML:

<div id="app">
  <movie-card v-for="(movie, index) in movies"
    v-bind:key="index"
    v-bind:title="movie.title"
    v-bind:image="movie.image">
  </movie-card>
</div>

Podemos utilizar la propiedad template de Vue en el código JavaScript y dejar el
index.html únicamente con el <div id='app'> sin nada en su interior, ya se
encargará Vue de insertarlo:

app.js

Vue.component('movie-card', {
  props: ['image', 'title'],
  template: `
    <div>
      <img width="100" v-bind:src="image" />
      <h2>{{ title }}</h2>
    </div>
  `,
})

new Vue({
  el: '#app',
  data: {
    movies: [
      { title: 'Regreso al Futuro', image: 'http://es.web.img3.acsta.net/pictures/14/04/03/13/45/034916.jpg' },
      { title: 'Matrix', image: 'http://t0.gstatic.com/images?q=tbn:ANd9GcQq3pIz-aKgkmYX1dJ-EL-AlHSPcOO7wdqRIJ5gJy9qNinXpmle' },
      { title: 'Interestellar', image: 'http://t1.gstatic.com/images?q=tbn:ANd9GcRf61mker2o4KH3CbVE7Zw5B1-VogMH8LfZHEaq3UdCMLxARZAB' }
    ]
  },
  template: `
    <div>
      <movie-card v-for="(movie, index) in movies"
        v-bind:key="index"
        v-bind:title="movie.title"
        v-bind:image="movie.image">
      </movie-card>
    </div>
  `
})

index.html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue component</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
  <div id="app">
    <movie-card></movie-card>
  </div>
  <script src="app.js"></script>
</body>
</html>

Esta es la forma que tiene Vue de crear componentes, que por supuesto no es la
única, pero que para algo sencillo nos puede servir sin necesidad de más
herramientas.

Otro ejemplo de primer componente
=================================

Comenzamos creando nuestro archivo index.html con una estructura básica con el
llamado a Vuejs desde un cdn y tambien creamos un div con el id app que es
donde mostraremos los datos del componente que crearemos luego:

<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>Component vue example</title>
    <script src="https://unpkg.com/vue"></script>
  </head>
  <body>
    <div id="app"></div>
  </body>
</html>

Ahora, crearemos un archivo js, app.js por ejemplo, que es donde empezaremos a
crear nuestra instancia de vue:

Primero declaramos a "app" con "const", o "var", luego a "new Vue" que de
contener un objeto de configuración

const app = new Vue ()

Este objeto va a tener una propiedad llamada "el" donde vamos a ubicar que es
elemento del DOM o del html es donde queremos que funcione vuejs.

const app = new Vue ({
  el: '#app'
})

Con lo anterior declaramos que queremos dentro del div "app" del dom será donde
va a estar nuestra aplicación vue.

Para poderle pasar datos a esa plantilla html se usa la sintaxsis mustache o de
doble llames {{ }} que insertaremos dentrto del "div app"

<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>Component vue example</title>
    <script src="https://unpkg.com/vue"></script>
  </head>
  <body>
    <div id="app">
      {{ message }}
    </div>
  </body>
</html>

Esta variable {{ message }} en el html la podemos llamar en nuestra aplicación
vue con una comunicación o vinculación "double data binding" que permite que si
el contenido de la variable en el DOM cambia, este a su vez también cambie en el
controlador que sería nuestro componente y si hay algún cambio en el controlador
también se vea reflejado en la vista o el DOM.

double data binding
===================

Este concepto heredado de Angular nos permite transmitir las propiedades de los
Component al DOM (la vista) para por ejemplo cambiar el color del fondo de la
página de blanco a negro. Y también necesitamos que los eventos de la vista sean
comunicados al Component, por ejemplo, para implementar un botón con el cual
mostrar / ocultar las imágenes de la lista de productos.

Para poder indicar en el controlador los datos que queremos que estén
comunicados con la vista usaremos la propiedad "data" que será un objeto, y
"data" va a contener todas las variables y datos que queramos que se comuniquen.

Dentro de data tendremos una propiedad que se llama "message" y que contendrá
una cadena con nuestro mensaje que vamos a mostrar en el DOM.

const app = new Vue({
  el: '#app',
  data: {
    message: 'Hello Vue!'
  }
})

Si abrimos index.html con nuestro navegador veremos el mensaje.

Ahora, vamos a hacer un poco más complejo nuestro ejemplo. Es común que nuestras
variables de los componentes que queremos que se comuniquen con la vista no sean
de tipo texto solamente sino que estén por ejemplo dentro de una etiqueta html
como el atributo de un enlace href que queremos que sea variable, dinámico y
cambie o por ejemplo una imagen que queremos que cambie con los datos que
mandamos desde el controlador.

Para seguir este ejemplo vamos a declarar otra propiedad dentro de "data" que
será "image" que contentra una "url" que apunta a una imagen de la web.

const app = new Vue({
  el: '#app',
  data: {
    message: 'Hello Vue!'
    image: 'http://t1.gstatic.com/images?q=tbn:ANd9GcRf61mker2o4KH3CbVE7Zw5B1-VogMH8LfZHEaq3UdCMLxARZAB'
  }
})

Ahora, como podemos mostrar esta imagen en el DOM?

Dentro de "div app" que es donde está funcionando nuestra aplicación vue vamos a
incluir un elemento "img" con su atributo "src" pero lo escribiremos usando la
directiva de vue v-bind que nos permite encadenar datos, es decir que establece
comunicación con los datos que haya en el componente asociado.

<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>Component vue example</title>
    <script src="https://unpkg.com/vue"></script>
  </head>
  <body>
    <div id="app">
      {{ message }}
      <img v-bind:src="image">
    </div>
    <script src="app.js"></script>
  </body>
</html>

Si abrimos index.html con nuestro navegador veremos el mensaje y la imegen.

Hay una sintaxis más abreviada, y es que cuando se trata de atributos pordemos
ahorrarnos de escribir v-bind:src="image" y con solo :src="image" debe
funcionar.

Ahora vamos a ver un ejemplo de uso de directivas para poder mostrar/ocultar
elementos del DOM, dependiendo de un valor, con v-if que es un simple if
de toda la vida.

Dentro de "div app" vamos a agregar otro "div" y el contenido que tenemos
actualmente lo vamos a meter dentro de este nuevo "div" al cual también le
incluiremos la directiva "v-if" y una variable que será "show".

<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>Component vue example</title>
    <script src="https://unpkg.com/vue"></script>
  </head>
  <body>
    <div id="app">
      <div v-if="show">
        {{ message }}
        <img v-bind:src="image" width="150">
      </div>
    </div>
    <script src="app.js"></script>
  </body>
</html>

Ahora, también hay que agregar esa variable "show" a nuestro componente y tendra
un valor, false o true:

const app = new Vue({
  el: '#app',
  data: {
    show: true,
    message: 'Hello Vue!',
    image: 'http://t1.gstatic.com/images?q=tbn:ANd9GcRf61mker2o4KH3CbVE7Zw5B1-VogMH8LfZHEaq3UdCMLxARZAB'
  }
})

Si abrimos index.html con nuestro navegador veremos el mensaje y la imegen o no,
dependindo del valor que tenga la variable show en el componente.

La gracia de estas directivas es dotar de dinamismo a las aplicaciones web.
Por lo tanto ese show no deberíamos tenerlo puesta así a mano sino que queremos
que esa variable cambie a través de algo, pues ese algo serían los métodos y
para poder trabajar con ellos y llamarlos es necesario tener eventos.

En el siguiente ejemplo veremos como con un botón podemos cambiar este valor de
"show" y mostrar u ocultar el contenido dependiendo de la acción del usuario.

Para eso vamos a crear un button en el html, este botón va a tener un evento de
click y con ese evento vamos a lanzar un método o una función, para lanzar el
evento, sería con la directiva "v-on" y el evento "click", en este caso
podríamos lanzar cualquier evento de del mouse o del mouse, como pasar por
encima de x elemento, o hacer click, o pulsar una tecla del teclado, etc.

Cuando este evento de click suceda, va a llamar a una función que llamaremos
"toggleShow".

De igual manera, en este caso con las directivas para eventos hay una sintaxis
más abreviada, v-on:click="" puede abreviarse a @click="".

<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>Component vue example</title>
    <script src="https://unpkg.com/vue"></script>
  </head>
  <body>
    <div id="app">
      <div v-if="show">
        {{ message }}
        <img v-bind:src="image" width="150">
      </div>
      <button v-on:click="toggleShow()">Show/Hide</button>
    </div>
    <script src="app.js"></script>
  </body>
</html>

Ahora tenemos que añadir nuestra función "toggleShow" en nuestro componente, así
como tenemos el objeto data, donde tenemos ordenadas todas las variables
asociadas a la vista, ahora debemos añadir una nueva propiedad que se llama
"methods" y es donde van a ir todas las funciones que nosotros queramos usar.

Methods y Data
==============

Los datos o modelos del componente están dentro de un objeto data, y las
funciones o métodos que creamos los colocamos en un objeto methods.

Aquí se abandona la idea o sintaxis de clases de ES6 como se venía utilizando en
React con React.Component por una esctructura de objetos similar al método
createClass de las primeras versiones de React.

Parece un paso atrás, pero tal y cómo funciona Vue, parece una forma muy
correcta de uso.

Ejemplo:

Vue.component('mi-component', {
    data: {},
    methods: {}
})

Dentro de "methods" declaramos a "toggleShow" y esta función lo que va a hacer
es cambiar el valor de show por el contrario del que tenga en ese momento.

Para poder referenciar los datos dentro de los métodos tenemos que hacer uso del
objeto "this" de javascript para referencial a "show" con this.show y le
indicaremos que sea justo lo contrario de lo que ya tuviese como valor, eso lo
haremos con this.show = !this.show.

const app = new Vue({
  el: '#app',
  data: {
    show: true,
    message: 'Hello Vue!',
    image: 'http://t1.gstatic.com/images?q=tbn:ANd9GcRf61mker2o4KH3CbVE7Zw5B1-VogMH8LfZHEaq3UdCMLxARZAB'
  },
  methods: {
    toggleShow: function () {
      this.show = !this.show
    }
  }
})

Si abrimos index.html con nuestro navegador y todo está bien veremos el mensaje,
la imegen y el botón, y al darle click ocultara y mostrar el elemento contenido
dentro del div.

De igual manera, todo este contenido que hemos puesto dentro de nuestro
"div app" podemos tenerlo dentro de nuestro código js, eso se haría con la
propiedad "template" el cual le podemos pasar un string, entonces copiamos todo
el contenido que tiene "div app" y lo pegamos en "template" en nuestro
componente, pero hay un detalle importante y es que todo lo que va devolver
"template" debe estar englobado en un único elemento, en un "div" por lo que
debemos agregar un "div" padre dentro de template, esto si es que no lo tiene
que es nuestro caso.

En index.html

<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>Component vue example</title>
    <script src="https://unpkg.com/vue"></script>
  </head>
  <body>
    <div id="app">
    </div>
    <script src="app.js"></script>
  </body>
</html>

y en app.js

const app = new Vue({
  el: '#app',
  template: `
    <div>
      <div v-if="show">
        {{ message }}
        <img v-bind:src="image" width="150">
      </div>
      <button @click="toggleShow()">Show/Hide</button>
    </div>
  `,
  data: {
    show: true,
    message: 'Hello Vue!',
    image: 'http://t1.gstatic.com/images?q=tbn:ANd9GcRf61mker2o4KH3CbVE7Zw5B1-VogMH8LfZHEaq3UdCMLxARZAB'
  },
  methods: {
    toggleShow: function () {
      this.show = !this.show
    }
  }
})

Si abrimos index.html con nuestro navegador y todo está bien veremos el mensaje,
la imegen y el botón, y al darle click ocultara y mostrar el elemento contenido
dentro del div tal cual como antes de probar la propiedad template.

Si no te gusta incrustar el html dentro del javascript, se puede sacar fuera
usando el tag "template" de html5 al cual le daremos un "id" para referenciarlo
en el componente, tal que:

<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>Component vue example</title>
    <script src="https://unpkg.com/vue"></script>
  </head>
  <body>
    <div id="app"></div>

    <template id="example">
      <div>
        <div v-if="show">
          {{ message }}
          <img v-bind:src="image" width="150">
        </div>
        <button @click="toggleShow()">Show/Hide</button>
      </div>
    </template>
    <script src="app.js"></script>
  </body>
</html>

y

const app = new Vue({
  el: '#app',
  template: '#example',
  data: {
    show: true,
    message: 'Hello Vue!',
    image: 'http://t1.gstatic.com/images?q=tbn:ANd9GcRf61mker2o4KH3CbVE7Zw5B1-VogMH8LfZHEaq3UdCMLxARZAB'
  },
  methods: {
    toggleShow: function () {
      this.show = !this.show
    }
  }
})

Si abrimos index.html con nuestro navegador y todo está bien veremos el mensaje,
la imegen y el botón, y al darle click ocultara y mostrar el elemento contenido
dentro del div tal cual como antes de probar la propiedad template y
referenciarlo en el componente.

Ahora vamos a ver un ejemplo de como podemos poder recorrer un listado de
objetos de un arreglo para mostrar esos datos.

Entonces, en nuestro componente, vamos a agregar una nueva propiedad que sería
"courses" que sería un array de objetos, y cada objeto contiene dos propiedades
que serían "name" y "url"y queremos mostrarlos en el HTML como una lista y que
cada elemento sea un enlace, entonces dentro de template creamos una lista en
html "ul" y "li" a la cual le vamos agregar la directiva "v-for" que lo que hace
es recorrer una lista de elementos, es un ciclo for. e imprimiremos el name de
cada elemnto que recorramos, tal que:

<ul>
  <li v-for="course in courses">
    {{ course.name}}
  </li>
</ul>

Para hacer más elegante y más eficiente este código podemos usar el "index" que
proporciona cada elemento dentro del array ademá de agregar una etiqueta de
enlace a cada elemento de la lista y también agregamos un "v-bind" para el
"href" para que esté comunicado con la data del controlador o componente.

El ejemplo completo quedaría así:

<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>Component vue example</title>
    <script src="https://unpkg.com/vue"></script>
  </head>
  <body>
    <div id="app"></div>
    <script src="app.js"></script>
  </body>
</html>

y

const app = new Vue({
  el: '#app',
  template: `
    <div>

      <ul>
        <li v-for="(course, index) in courses" v-bind:key="index">
          <a v-bind:href="course.url"> {{ course.name }} </a>
        </li>
      </ul>

      <div v-if="show">
        {{ message }}
        <img v-bind:src="image" width="150">
      </div>
      <button @click="toggleShow()">Show/Hide</button>

    </div>
  `,
  data: {
    courses: [
      { name: "PHP", url: 'https://www.youtube.com/1' },
      { name: "Python", url: 'https://www.youtube.com/2' },
      { name: "JavaScript", url: 'https://www.youtube.com/3' },
    ],
    show: true,
    message: 'Hello Vue!',
    image: 'http://t1.gstatic.com/images?q=tbn:ANd9GcRf61mker2o4KH3CbVE7Zw5B1-VogMH8LfZHEaq3UdCMLxARZAB'
  },
  methods: {
    toggleShow: function () {
      this.show = !this.show
    }
  }
})

Otro ejemplo
============

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue component</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
<div id="app">
    <!-- Crea una instancia del componente paragraphs -->
    <paragraphs></paragraphs>
</div>

<script>
// Define un nuevo componente llamado paragraphs
Vue.component('paragraphs', {
  template: `
  <div>
    <p>This is a paragraphs</p>
  <div>
  `
})
new Vue({
  el: '#app'
})
</script>
</body>
</html>

Otro ejemplo
============

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue component</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
<div id="app">
  <ul>
    <vegetables-list
      v-for="vegetal in vegetablesList"
      v-bind:prop="vegetal">
    </vegetables-list>
  </ul>
</div>

<script>
Vue.component('vegetables-list', {
  props: ['prop'],
  template: '<li>{{ prop.name }}</li>'
})

var app7 = new Vue({
  el: '#app',
  data: {
    vegetablesList: [
      { name: 'Vegetables' },
      { name: 'Cheese' },
      { name: 'Karrot' }
    ]
  }
})
</script>
</body>
</html>

Otro ejemplo
============

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue component</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
<div id="app">
  <app-header></app-header>
  <ul>
    <app-content
      v-for="item in bookList"
      v-bind:prop="item">
    </app-content>
  </ul>
  <app-footer></app-footer>
</div>

<script>
Vue.component('app-header', {
  template: `
  <div>
    <h1>Header</h1>
  <div>
  `
})

Vue.component('app-content', {
  props: ['prop'],
  template: `
    <li>{{ prop.title }}</li>
  `
})

Vue.component('app-footer', {
  template: `
  <div>
    <h4>Footer</h4>
  <div>
  `
})

var app7 = new Vue({
  el: '#app',
  data: {
    bookList: [
      { title: 'Il cimpendium malefican' },
      { title: 'Free demololatrie' },
      { title: 'The nine gate' }
    ]
  }
})
</script>
</body>
</html>

Otro ejemplo
============

<!--
La variable active, que representa qué elemento
del menú está actualmente seleccionado.
-->
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Vue example</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
<div id="nav">
  <a href="#" v-on:click="makeActive('home')">Home</a>
  <a href="#" v-on:click="makeActive('projects')">Projects</a>
  <a href="#" v-on:click="makeActive('services')">Services</a>
  <a href="#" v-on:click="makeActive('contact')">Contact</a>
  <p>You chose <b>{{ active }}</b></p>
</div>
<script>
var demo = new Vue({
  el: '#nav',
  data: {
    active: 'home'
  },
  methods: {
    makeActive: function(item){
      this.active = item;
    }
  }
});
</script>
</body>
</html>

Otro ejemplo
============

<!--
Al darle click al texto aparece un campo que permite
editar el texto y salir de la edición con un click.
-->
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Vue example</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
<div id="main">
  <div v-on:click.stop v-if="show_input">
    <input type="text" v-model="text_content" />
  </div>
  <p v-on:click.stop="toggleTooltip">{{text_content}}</p>
</div>
<script>
var demo = new Vue({
  el: '#main',
  data: {
    show_input: false,
    text_content: 'Click and edit me'
  },
  methods: {
    toggleTooltip: function(){
      this.show_input = !this.show_input;
    }
  }
})
</script>
</body>
</html>

=======
Vue CLI
=======

Es una línea de comandos que nos permite crear proyectos más grandes y
complejos. Es un sistema completo para el desarrollo rápido de Vue.js.

Instalación
===========

Para instalar el nuevo paquete, use uno de los siguientes comandos. Necesita
privilegios de administrador para ejecutarlos a menos que npm se haya instalado
en su sistema a través de un administrador de versiones de Node.js

$ sudo npm install -g @vue/cli

Después de la instalación, tendrá acceso al binario vue en su línea de comando.

Puede verificar que esté instalado correctamente simplemente ejecutando vue, que
debería presentarle un mensaje de ayuda con una lista de todos los comandos
disponibles.

$ vue

y para chequear la versión:

$ vue --version

@vue/cli 4.5.13

Para actualizar la versión

$ sudo npm update -g @vue/cli

Crear un proyecto de vue
========================

$ vue create name_project

Luedo de darle crear nos va a mostrar los presets, que son un tipo de
configuración base que puedes ajustar a las necesidades del proyecto que se está
creando.

Se le pedirá que elija un ajuste preestablecido. Puede elegir el ajuste
preestablecido o predeterminado que viene con una configuración básica de Babel
+ ESLint, o seleccionar "Seleccionar funciones manualmente" para elegir las
funciones que necesita.

-Babel es un compilador de JavaScript.

-ESLint es una herramienta de análisis de código estático para identificar
patrones problemáticos encontrados en el código JavaScript.

La configuración predeterminada es excelente para crear rápidamente un prototipo
de un nuevo proyecto, mientras que la configuración manual proporciona más
opciones que probablemente sean necesarias para proyectos más orientados a la
producción.

Si opta por seleccionar funciones manualmente, al final de las indicaciones
también tiene la opción de guardar sus selecciones como un ajuste preestablecido
para poder reutilizarlas en el futuro.

El comando vue create tiene varias opciones y puede explorarlas todas
ejecutando:

$ vue create --help

Usage: create [options] <app-name>

create a new project powered by vue-cli-service

Options:

  -p, --preset <presetName>       Skip prompts and use saved or remote preset
  -d, --default                   Skip prompts and use default preset
  -i, --inlinePreset <json>       Skip prompts and use inline JSON string as preset
  -m, --packageManager <command>  Use specified npm client when installing dependencies
  -r, --registry <url>            Use specified npm registry when installing dependencies
  -g, --git [message|false]       Force / skip git initialization, optionally specify initial commit message
  -n, --no-git                    Skip git initialization
  -f, --force                     Overwrite target directory if it exists
  -c, --clone                     Use git clone when fetching remote preset
  -x, --proxy                     Use specified proxy when creating project
  -b, --bare                      Scaffold project without beginner instructions
  -h, --help                      Output usage information

Usando la GUI
=============

También puede crear y administrar proyectos usando una interfaz gráfica con el
comando

$ vue ui

El comando anterior abrirá una ventana del navegador con una GUI que lo guiará a
través del proceso de creación del proyecto.

Al crear un proyecto con Vue CLI nos queda esta estructura:

-src/
    /assets: Donde puedo colocar mis imágenes, fuentes de texto, etc.

    /components

    App.vue: Aplicación principal o componente de orden superior.

    main.js: Configuración principal e inicial. Donde se importa Vue y se hace
    la configuración base.

-babel.config.js

-node_modules

-package.json

-package-lock.json

-public

-README.md

Estructura de aplicación en proyectos Vue.js
============================================

/node_modules: Es la carpeta vendor de nuestro proyecto. Aquí se almacenarán
todos los paquetes que necesita nuestro proyecto para funcionar.

/public: En esta carpeta estarán los archivos públicos de la aplicación. Aquí
también estará el punto de entrada el cuál es el archivo index.html.

/public/index.html: Es el archivo de acceso principal de la aplicación.

/src: Aquí estará todo el código de la aplicación en Vue.js, es decir,
componentes principalmente.

/src/components: Contiene todos los componentes creados en Vue.js.

/src/App.vue: Es el componente principal de la aplicación. Este componente
llamará a todos los demás componentes creados en la carpeta components.

main.js: Es el archivo principal o punto de entrada JS de la aplicación. Aquí se
importan las librerías que hayamos instalado en la aplicación y se incia la
instancia principal de Vue.

package.json: Este archivo indica las dependencias de nuestro proyecto, los
comandos disponibles y otras configuraciones.

babel.config.js: Es la configuración de Babel. Básicamente indica como se va a
transpilar el código moderno a código más antiguo que entienda todos los
navegadores.

.gitignore: Indica que archivos omitir para el sistema de gestión de versiones.

Lo más importante de esta estructura es entender en dónde se deben crear los
nuevos componentes de Vue y cómo integrarlos a nuestra aplicación.

Fuente
======

-https://blog.pleets.org/article/estructura-de-directorios-en-vuejs

Correr la aplicación desde un servidor de desarrollo de node
============================================================

$ npm run serve

App running at:
  - Local:   http://localhost:8080/
  - Network: http://192.168.1.102:8080/

Correr la aplicación desde un servidor de desarrollo de vue
===========================================================

1) Instralar el paquete requerido:

$ npm i -g @vue/cli-service-global

2) Ejecutar el comando sobre el archivo principal del proyecto:

$ vue serve App.vue

App running at:
  - Local:   http://localhost:8080/
  - Network: http://192.168.1.102:8080/

============================================
.gitignore de un proyecto creado con Vue CLI
============================================

.DS_Store
node_modules
/dist

# local env files
.env.local
.env.*.local

# Log files
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Editor directories and files
.idea
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

Fuentes
=======

-https://github.com/carlosazaustre/carlosazaustre.es/blob/master/content/posts//desarrollo-basado-en-componentes-con-vue-js/index.mdx

-https://medium.com/techwomenc/crea-tu-primer-componente-single-file-con-vue-js-8802381311

-https://dev.to/duxtech/crea-tu-primer-componente-con-vue-js-para-dummies-2n4c

-https://cli.vuejs.org/guide/installation.html

=================
Scoped CSS en Vue
=================

Cuando una etiqueta <style> tiene el atributo de scoped, su CSS se aplicará solo
a los elementos del componente actual. Esto es similar a la encapsulación de
estilo que se encuentra en Shadow DOM. Viene con algunas advertencias, pero no
requiere ningún polyfills.

===========================
Vue: Single File Components
===========================

Con Vue podemos crear componentes de múltiples formas.

Existe una solución que junto con Webpack y un módulo (vue-loader) nos permite
tener en un único fichero la vista (template), el diseño (css) y la lógica
(javascript). Estos ficheros tienen una extensión .vue y tienen la siguiente
forma:

<template>
// Aquí va el código HTML
</template>

<script>
// Aquí va el código Javascript, puedes usar Babel, TypeScript,...)
</script>

<style>
// Aquí va el código CSS, puedes usar stylus, Sass, Less, etc...
</style>

Lo bueno de éste fichero, es que al no ser un fichero final de producción, es un
fichero de desarrollo que luego Webpack interpreta y extrae las diferentes
partes a sus ficheros correspondientes, nos da mucha versatilidad, por ejemplo:

Si preferimos utilizar Pug/Jade para el marcado en lugar de HTML convencional,
podemos hacerlo porque Webpack leerá el fichero y gracias a los "loaders"
transpilará el código al resultado final.

De igual manera, si prefieres utilizar TypeScript o CoffeeScript para el código
JavaScript, también es posible, al igual que el estilo, puedes utilizar
cualquier preprocesador que quieras: Less, Stylus, Sass, SCSS, PostCSS,...

Lo único que tienes que hacer es indicar en cada tag que tipo estás utilizando
con el atributo lang. Por ejemplo:

<template lang="pug">
  ...
</template>

<script lang="ts">
</script>

<style lang="scss">
</style>

Esto lo hace muy versátil y práctico para equipos de trabajo dónde haya personas
dedicadas al diseño y maquetación, y otras personas encargadas del código. De
esta manera, la persona dedicada al CSS puede utilizar el preprocesador que
prefiera, el desarrollador utilizar TypeScript si lo prefiere, etc...

para el ejemplo creamos MovieCard.vue

<template>
  <div>
    <img width="100" v-bind:src="image" v-bind:alt="title"/>
    <h2>{{ title }}</h2>
  </div>
</template>

<script>
  export default {
    name: 'movie-card',
    props: {
        image: String,
        title: String
    }
  }
</script>

<style scoped>
  h2 {
    font-size: 18pt;
  }
</style>

Descripción del código
======================

-Lo que hay en "template" es lo que vamos a representar en el html.

-"name" en el script, es el nombre del componente y con ese nombre lo vamos a
llamar desde index.html

-Dentro del script también se pueden llamar a otros componentes, y estos deben
ser importados para poder se usados con la variable "components", ejemplo:

<script>
import ImageMovie from './ImageMovie.vue'
  export default {
    name: 'movie-card',
    components: {
    }
    props: {
      image: String,
      title: String
    }
  }
</script>

Llamar un componente dentro de otro
===================================

Supongamos que tenemos SiteNav.vue

<template>
  <ul class="nav">
    <li class="nav-item" v-for="item in items" :key="item">
      <a class="nav-link" href="#">{{ item }}</a>
    </li>
  </ul>
</template>

<script>
export default {
  props: {
    items: {
      type: Array,
      required: true,
    },
  },
};
</script>

<style scoped>
ul > li {
  border: solid 1px silver;
  margin-left: 2px;
  background: rgb(240, 240, 240);
}
</style>

Para utilizar el componente creado anteriormente dentro de otro componente basta
importarlo mediante un import y cargarlo al componente padre. Observemos por
ejemplo como el siguente componente carga SiteNav.

<template>
  <div id="app">
    <site-nav :items="nav"></site-nav>
  </div>
</template>

<script>
import SiteNav from "./components/SiteNav";

export default {
  name: "App",
  components: {
    SiteNav,
  },
  data() {
    return {
      nav: ["Home", "Products", "About Us"],
    };
  },
};
</script>

============================================================================
Ejemplo de un componente para exportar con webpack en un proyecto de Laravel
============================================================================

En resources/js/app.js:

Vue.component(
  'name-component',
  () => import('./components/NameComponent.vue')
);

En resources/js/components/NameComponent.vue:

<template>
    sssss
</template>

<script>
export default {
  data () {
  },
  props :{
  },
}
</script>

resources/views/index.blade.php

<name-component></name-component>

======================================
Instalar Bootstrap en proyectos Vue.js
======================================

Lo primero que debes hacer es agregar Bootstrap y Popper al proyecto.

$ npm i --save bootstrap

$ npm i --save jquery popper.js

Después de esto basta simplemente importar bootstrap de la siguiente manera en
el archivo main.js.

import "bootstrap";
import "bootstrap/dist/css/bootstrap.min.css";

si recién creaste tu proyecto en Vue tu archivo main.js lucirá muy similar al
sighuiente.

import Vue from "vue";
import App from "./App.vue";
import "bootstrap";
import "bootstrap/dist/css/bootstrap.min.css";

Vue.config.productionTip = false;

new Vue({
  render: (h) => h(App),
}).$mount("#app");

Una vez hecho esto ya podrás empezar a utilizar bootstrap en tus componentes.

Fuente
======

-https://blog.pleets.org/article/instalar-bootstrap-en-proyecto-vuejs

==================================
Paso de parámetros a un componente
==================================

En el escript:

Vue.component('x-button', {
  props: ['url', 'text'],
  template: `
    <a :href="url" class="btn btn-primary">
      {{ text }}
    </a>
  `
});

var vue = new Vue({
  el: "#app",
});

En el index.html

<div id="app" class="m-3">
  <x-button
    text="Go"
    url="https://www.google.com">
  </x-button>
</div>

================
Clases dinámicas
================

Supogamos que queremos mostrar en rojo la facturación menor o igual a 100 USD y
en verde la facturación por encima de 100 USD. Para esto, podemos utilizar el
shortcut la directiva v-bind para colocar un objeto en el atributo array y
decidir si se aplica cada clase:

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>My first Vue app</title>
  <script src="https://unpkg.com/vue"></script>
</head>
<body>
<style type="text/css">
.red {
  color: red;
}
.green {
  color: green;
}
</style>

<ul id="app">
  <li
    v-bind:class="{ red: price <= 100, green: price > 100 }"
    v-for="(price, date) in sales">
    {{ date }} - ${{ price }}
  </li>
</ul>

<script>
var vue = new Vue({
  el: "#app",
  data: {
    sales: {
      '2020-01-01': 100,
      '2020-01-02': 200,
      '2020-01-03': 300
    }
  }
});
</script>
</body>
</html>

=================
Sintaxis de array
=================

Si bien es posible pasar un objeto en el atributo class, también es posible
pasar un array de clases a agregar. Veamos un ejemplo simple en donde adjuntamos
un par de clases a un botón.

<button :class="['btn', 'btn-success']">Submit</button>

Esto es exactamente igual a hacer lo siguiente:

<button class="btn btn-primary">Submit</button>

A simple vista parece no tener mucha utilidad, el verdadero poder de esta
sintaxis consiste en que puedes combinarlo con la sintaxis de objeto. Entonces
puede ser útil que debas verificar si realmente necesitas la clase btn-success
en un botón o necesitas btn-danger. Dicho esto, podríamos tener algo como lo
siguiente:

<button
  :class="['btn', isError ? 'btn-danger' : 'btn-success']"
  @click="isError = !isError">
  Submit
</button>

Al dar clic en el botón cada vez cambiará de clase según el valor de isError.
Puedes ver este ejemplo corriendo en codepen.