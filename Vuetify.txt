=====================
Guía de Vuetify by dM
=====================

Vuetify es una biblioteca de interfaz de usuario de Vue con componentes de
materiales bellamente hechos a mano. No se requieren habilidades de diseño: todo
lo que necesita para crear aplicaciones increíbles está al alcance de su mano.

===========
Instalación
===========

Comience con Vuetify, se requeire de el framework Vue.js, el más popular del
mundo para crear aplicaciones ricas en funciones y ultrarrápidas.

Si aún no ha creado un nuevo proyecto Vue.js usando Vue CLI, puede hacerlo
escribiendo:

Chequear la versión de Vue CLI instalada:

$ vue --version

Si no está instalada, chequear la guía de Vuejs, si está instalada, prosiga.

$ vue create my-app

Navegue hasta el directorio creado

$ cd my-app

Ahora que tiene un proyecto instanciado, puede agregar el paquete Vuetify:

$ vue add vuetify

Correr la aplicación desde un servidor de desarrollo de node

$ npm run serve

La app correra desde http://localhost:8080/

===========
Uso con CDN
===========

Para probar el uso de Vuetify sin instalar una plantilla de Vue CLI, copie el
código a continuación en su archivo index.html. Esto extraerá la última versión
de Vue y Vuetify, lo que le permitirá comenzar a jugar con los componentes.
También puedes usar el iniciador de Vuetify.

<!DOCTYPE html>
<html>
<head>
  <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/@mdi/font@6.x/css/materialdesignicons.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.min.css" rel="stylesheet">
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui">
</head>
<body>
  <div id="app">
    <v-app>
      <v-main>
        <v-container>Hello world</v-container>
      </v-main>
    </v-app>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.js"></script>
  <script>
    new Vue({
      el: '#app',
      vuetify: new Vuetify(),
    })
  </script>
</body>
</html>

=================================================
Crear proyecto con Vue CLI + vue-router + Vuetify
=================================================

Chequear la versión de Vue CLI instalada:

$ vue --version

Si no está instalada, chequear la guía de Vuejs, si está instalada, prosiga.

$ vue create my-app

Le pedirá que seleccione un entorno preestablecido, seleccionar el manual, luego
le pedirá que seleccione las características necesarias para su proyecto, debe
escoger las siguientes con espacio y luego enter en la primera:

* Choose Vue version
* Babel
TypeScript
Progressive Web App (PWA) Support
* Router
Vuex
* CSS Pre-processors
* Linter / Formatter
Unit Testing
E2E Testing

Le seguirá pidiendo otras características pero ya ligadas a las selecciones
principales.

Una vez finalizado el proceso, navegue hasta el directorio creado

$ cd my-app

Ahora que tiene un proyecto instanciado, puede agregar el paquete Vuetify:

$ vue add vuetify

Correr la aplicación desde un servidor de desarrollo de node

$ npm run serve

La app correra desde http://localhost:8080/

==============================
Usar iconos de material desing
==============================

<v-icon dark>
  mdi-chevron-left
</v-icon>

Lista de íconos que se pueden usar: https://materialdesignicons.com/

===========================================================
Cambiar el color de fondo de todos los componente de la app
===========================================================

// App.vue

<template>
  <v-app>
    <v-main style="background-color: rgb(41, 31, 102);">
      <router-view/>
    </v-main>
  </v-app>
</template>

ó

<template>
  <v-app>
    <v-main class="red">
      <router-view/>
    </v-main>
  </v-app>
</template>

===============================================
Cambiar el color de fondo de un solo componente
===============================================

Para que no arrastre el color a todos los componentes, tiene que asignarse en
todos los componentes.

methods: {
  setBackground () {
    document.querySelector('.v-application').setAttribute('style', 'background-color: #ffffff')
  }
},
mounted () {
  this.setBackground()
}

=======================================
Agregar colores personalizados a un div
=======================================

// vuetify.js

import Vue from 'vue'
import Vuetify from 'vuetify/lib/framework'
import colors from 'vuetify/lib/util/colors'
// import colors from 'vuetify/es5/util/colors'

Vue.use(Vuetify)

export default new Vuetify({
  theme: {
    themes: {
      light: {
        primary: colors.red.darken1,
        colorPersonalizado: '#000000'
      }
    }
  }
})

// mi_componente.vue

<template>
  <v-container>
    <div class="colorPersonalizado">
      <v-layout>
        <router-link
          to="/home"
          Inicio
        </router-link>
      </v-layout>
    </div>
  </v-container>
</template>

==================================================
Quitar la decoración de un enlace tipo router-link
==================================================

<router-link
  to="/"
  class="blue--text"
  style="text-decoration: none; color: inherit;">
  <b>Home</b>
</router-link>

===================
Columnas en Vuetify
===================

// 2 Columnas

<v-row class="text-center">
  <v-col cols="6">
    xxxxxxxxxxxx
  </v-col>
  <v-col cols="6">
    xxxxxxxxxxxx
  </v-col>
</v-row>

// 3 Columnas

<v-row class="text-center">
  <v-col cols="4">
    xxxxxxxxxxxx
  </v-col>
  <v-col cols="4">
    xxxxxxxxxxxx
  </v-col>
  <v-col cols="4">
    xxxxxxxxxxxx
  </v-col>
</v-row>

====================
Alineación de textos
====================

<template>
  <div>
    <p class="text-left">
      Left aligned text on all viewport sizes.
    </p>
    <p class="text-center">
      Center aligned text on all viewport sizes.
    </p>
    <p class="text-right">
      Right aligned text on all viewport sizes.
    </p>

    <p class="text-sm-left">
      Left aligned text on viewports sized SM (small) or wider.
    </p>
    <p class="text-md-left">
      Left aligned text on viewports sized MD (medium) or wider.
    </p>
    <p class="text-lg-left">
      Left aligned text on viewports sized LG (large) or wider.
    </p>
    <p class="text-xl-left">
      Left aligned text on viewports sized XL (extra-large) or wider.
    </p>
  </div>
</template>

========================
Cambiar tamaño del texto
========================

Seleccionar la clase o componente adecuado a través de los estilos, o agregar
una clase personalizadas.

.v-card {
  font-size: 0.85em;
}

.my_text {
  font-size: 0.85em;
}

===========
Breadcrumbs
===========

Template:

<template>
  <div>
    <v-breadcrumbs :items="items"></v-breadcrumbs>

    <v-breadcrumbs
      :items="items"
      large
    ></v-breadcrumbs>
  </div>
</template>

Script:

<script>
  export default {
    data: () => ({
      items: [
        {
          text: 'Dashboard',
          disabled: false,
          href: 'breadcrumbs_dashboard',
        },
        {
          text: 'Link 1',
          disabled: false,
          href: 'breadcrumbs_link_1',
        },
        {
          text: 'Link 2',
          disabled: true,
          href: 'breadcrumbs_link_2',
        },
      ],
    }),
  }
</script>

======================
Ventana modal o dialog
======================

<template>
  <v-row justify="center">
    <v-dialog
      v-model="dialog"
      persistent
      max-width="290"
    >
      <template v-slot:activator="{ on, attrs }">
        <v-btn
          color="primary"
          dark
          v-bind="attrs"
          v-on="on"
        >
          Open Dialog
        </v-btn>
      </template>
      <v-card>
        <v-card-title class="text-h5">
          Use Google's location service?
        </v-card-title>
        <v-card-text>Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.</v-card-text>
        <v-card-actions>
          <v-spacer></v-spacer>
          <v-btn
            color="green darken-1"
            text
            @click="dialog = false"
          >
            Disagree
          </v-btn>
          <v-btn
            color="green darken-1"
            text
            @click="dialog = false"
          >
            Agree
          </v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>
  </v-row>
</template>

<script>
  export default {
    data () {
      return {
        dialog: false,
      }
    },
  }
</script>

===============================
Mostrar imagen en un componente
===============================

1) Guardamos la imagen en /src/assets, ejemplo 1.png tal que /src/assets/1.png

2) En el template del componente agregamos:

<v-img
  alt="XXX"
  class=""
  contain
  :src="myImage"
  transition="scale-transition"
  width="50"
/>

y en el script:

export default {
  data () {
    return {
      myImage: require('@/assets/1.png')
    }
  },
  .
  .
  .

Con esto ya se debería ver la imagen en el componente.

-----

Otra manera es simplemente pasando la ruta en el atributo de v-img

<v-img
  alt="XXX"
  class=""
  contain
  src="@/assets/logo-inversa.png"
  transition="scale-transition"
  width="50"
/>

=====================================================
Cambiar el color de fondo de un componente de Vuetify
=====================================================

<v-app style="background-color: rgb(41, 31, 102);">
  <v-main>
    <router-view/>
  </v-main>
</v-app>

===============================
Centrar elementos, como botones
===============================

<v-layout justify-center>
  <v-card-actions>
    <v-btn primary>
    <span>SignUp</span>
    </v-btn>
  </v-card-actions>
</v-layout>

==============================
Campo de tipo texto redondeado
==============================

<v-text-field
  label="Correo electrónico"
  v-model="email"
  type="email"
  name="email"
  aria-label="Correo electrónico"
  filled
  rounded
  dense
  required>
</v-text-field>

==================
Dar color a enlace
==================

<v-layout justify-center>
  <router-link
    to="/password-reset"
    style="color: #FFFFFF;">
    OLVIDÉ MI CONTRASEÑA
  </router-link>
</v-layout>

ó, con la clase nativa white--text

<v-layout justify-center>
  <router-link
    to="/password-reset"
    class="white--text">
    OLVIDÉ MI CONTRASEÑA
  </router-link>
</v-layout>

=============
npm run build
=============

Chequear que en el package.json este el comando build entre los scripts, de esa
se puede usar el siguiente comando:

$ npm run build

Este comando permite exportar la aplicacion para un entorno de producción,
genera la carpeta /dist que contiene todos los archivos necesarios para el
despliegue en el servidor. Para probar que todo esté bien, pegue el contenido
de la carpeta /dist en la carpeta www de su servidor http local y navegue hasta
127.0.0.1/ para probar la app.

Nota: Al exportar para producción la consola alerta y suguere cambios para
mejorar la app en producción, se debe estar atento a ellos.

======================================================
Pasar parametros con router-link para detail component
======================================================

En index.js tenemos el siguiente componente detail, al cual le vamos a pasar el
id de un objeto como parametro a través de un tag router-link.

{
  path: '/store-detail/:id',
  name: 'store-detail',
  component: StoreDetail
},

Desde otro componente donde recibo el arreglo de objetos stores, lo recorro y
obtengo el id con store.id, se lo paso como parámetro en :to al componente
store-detail que lo va a recibir

<router-link
  :to="{ name:'store-detail', params:{ id: store.id }}"
  style="text-decoration: none; color: inherit;"
>
  <h3 class="ma-0">{{ store.name }}</h3>
</router-link>

Ya en el componente StoreDetail.vue lo recibo e imprimo el valor recibido con
{{ store.name }} en el template

<script>
import axios from 'axios'
export default {
  data: () => ({
    store: [],
    api_url: 'http://127.0.0.1:8000/'
  }),
  created () {
    document.title = 'INVERSA - Tiendas'
    console.log('params: ', this.$route.params.id)
  },
  methods: {
  },
  mounted () {
    /*
    * Establece los datos que van en la cabecera de la solicitud.
    */
    const header = {
      headers: {
        'Content-Type': 'application/json;charset=UTF-8',
        'Access-Control-Allow-Origin': '*',
        'Content-Language': 'en'
      }
    }
    /*
    * Obtiene los datos de las tiendas.
    */
    axios.get(this.api_url + 'api/stores/' + this.$route.params.id, header)
      .then((response) => {
        this.store = response.data.values
      })
      .catch((error) => {
        console.log(error)
      })
  }
}
</script>

Otro ejemplo
============

//routes.js
path: '/:data',
name: 'Home',
component: () => import('pages/YourPage.vue')

//Passing parameters
this.$router.push({
      name: 'Home',
      params: { data: yourData}
    });

//Receiving parameters in Home component
created() {
    console.log('Params: ', this.$route.params);
}

==============================
Establecer una variable global
==============================

en main.js podemos establecer:

Vue.prototype.$api_url = 'http://127.0.0.1:8000/'

Luego ya en cualquier componente podemos llamarla

/*
* Obtiene los datos de las órdenes.
*/
axios.get(this.$api_url + 'api/orders', header)
  .then((response) => {
    this.orders = response.data
  })
  .catch((error) => {
    console.log(error)
  })
