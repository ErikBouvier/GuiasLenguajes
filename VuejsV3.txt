====================
Guía de Vue.js by dM
====================

============
Introducción
============

¿Qué es Vue.js?

Vue (pronunciado /vjuː/ en inglés, como view) es un framework progresivo para
construir interfaces de usuario. A diferencia de otros frameworks monolíticos,
Vue está diseñado desde el inicio para ser adoptado incrementalmente.
La biblioteca principal se enfoca solo en la capa de la vista, y es muy simple
de utilizar e integrar con otros proyectos o bibliotecas existentes. Por otro
lado, Vue también es perfectamente capaz de soportar aplicaciones sofisticadas
de una sola página (en inglés single-page-application o SPA) cuando se utiliza
en combinación con herramientas modernas y librerías compatibles.

Vue combina buenas prácticas de Angular y de React.

===========
Instalación
===========

Inclusión directa con <script>
==============================

La manera más sencilla de probar Vue.js es usando el ejemplo “hola mundo” creado
un archivo .html e incluir Vue con un llamado a un enlace CDN:

<!-- development version, includes helpful console warnings -->
<script src="https://unpkg.com/vue@3.4.19/dist/vue.global.js"></script>

Instalación con NPM
===================

NPM es el método de instalación recomendado para construir aplicaciones a gran
escala con Vue. Este combina perfectamente con empaquetadores de módulos, tales
como Webpack o Browserify. Vue también ofrece herramientas para la creación de
componentes de un solo archivo (en inglés Single-File Components).

$ npm install vue

Con esto se instalara la versión estable de Vue, no la más reciente, a la fecha
de 2024 la versión estable es la 3.X.

=================
Directivas de Vue
=================

Son como una herencia que toma Vue de Angular 1 y son atributos en el html o el
template que insertan lógica de manera sencilla, siempre empiezan con "v-".

Ejemplos:

v-for: Lo que hace es recorrer una lista de elementos, es un ciclo for.

v-on: Que lo que hace es escuchar un evento, nativo o creado por el usuario.

v-bind: Vincula un atributo HTML a un valor que tengamos en nuestro modelo.
Encadena datos, es decir que establece comunicación con los datos que haya en el
componente asociado. Sirve para cualquier atributo, por ejemplo style.

v-if: Un condicional que inyecta un elemento al DOM según la condición.

v-else: El else de esa condicional.

v-show: Para mostrar u ocultar elementos usando la propiedad display de CSS.

v-model: Permite enlazar un elemento con alguna propiedad de un estado. Permite
la vinculación bidireccional entre los datos del dom y el estado de la
aplicación.

v-text: Esta directiva permite hacer un trabajo similar a la interpolación de
texto con la diferencia que la interpolación puede ser usada para renderizar un
fragmento del texto de un elemento, la directiva v-text renderizará todo el
contenido. Permite actualizar la propiedad textContent del elemento.

v-html: Esta directiva permite imprimir código html en el elemento en cuestión.
Es el equivalente al innerHTML de JavaScript.

v-pre: Le indica a Vue que no debe realizar ningún proceso de compilación en
este elemento y cualquiera de sus hijos.

v-once: Renderiza el elemento solo una vez. Si la expresión asociada al elemento
cambia no se verá reflejada en el template.

Y existen más directivas en Vue...

=====================
Hola mundo en Vuejs 3
=====================

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Hello world!</title>
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
</head>
<body>
    <div id="app">{{ message }}</div>
    <script>
        const { createApp, ref } = Vue

        createApp({
            setup() {
                const message = ref('Hello world!');
                return {
                    message
                }
            }
        }).mount('#app')
    </script>
</body>
</html>

=================
Crear una función
=================

<!DOCTYPE html>
<html>
<head>
    <script src="../vue/vue.global.js"></script>
    <title>My first Vue page</title>
</head>
<body>
    <div id="app">
        <button @click="myFunction()">Click me!</button>
    </div>
    <script>
        const { createApp, ref } = Vue

        createApp({
            setup() {
                const myFunction = () => {
                    alert("Hello!");
                }

                return {
                    myFunction
                }
            }
        }).mount('#app')

    </script>
</body>
</html>

=================
Ejemplo de v-bind
=================

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>v-bind Example</title>
    <script src="../vue/vue.global.js"></script>
    <style>
        div {
            margin: 10px;
            padding: 10px;
            border: solid black 1px;
            display: inline-block;
        }

        .pinkBG{
            background-color: lightpink;
        }
    </style>
</head>
<body>

<div id="app">
    <div v-bind:class="vueClass">Este elemento está vinculado a la clase "pinkBG".</div>
</div>

<script>
    const app = Vue.createApp({
        data() {
            return {
                vueClass: "pinkBG"
            }
        }
    })

    app.mount('#app')
</script>

</body>
</html>

Otro ejemplo
============

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Hello world!</title>
    <script src="vue/vue.global.js"></script>
</head>
<body>
    <div id="app">
        <p>
            {{ message }}
        </p>
        <img v-bind:src="url">
    </div>
    <script>
        const { createApp, ref } = Vue

        createApp({
            setup() {
                const message = "El navegador encuentra el valor del atributo src de la instancia de Vue con el uso de 'v-bind'.";
                const url = "https://www.w3schools.com/vue/img_beach3.jpg";
                return {
                    url,
                    message
                }
            }
        }).mount('#app')
    </script>
</body>
</html>

================
v-bind font-size
================

<!DOCTYPE html>
<html>
<head>
    <title>v-bind font-size</title>
    <script src="vue/vue.global.js"></script>
    <style>
        #app > div {
        width: 200px;
        padding: 20px;
        border: dashed black 1px;
        background-color: lightcoral;
        }
    </style>
</head>
<body>

<h1>'v-bind' Font Size Example</h1>

<p>El navegador establece el tamaño de fuente según el valor de "tamaño" en la instancia de Vue.</p>

<div id="app">
    <div v-bind:style="{ fontSize: size }">Text example</div>
</div>

<script>
    const app = Vue.createApp({
        data() {
            return {
                size: '28px'
            }
        }
    })
    app.mount('#app')
</script>

================
v-bind font-size
================

</body>
</html>

<!DOCTYPE html>
<html>
<head>
    <title>v-bind font-size</title>
    <script src="vue/vue.global.js"></script>
    <style>
        #app > div {
            width: 200px;
            padding: 20px;
            border: dashed black 1px;
            background-color: lightcoral;
        }
    </style>
</head>
<body>

<h1>'v-bind' Font Size Example</h1>

<p>El navegador establece el tamaño de fuente en píxeles según el valor numérico de 'tamaño' en la instancia de Vue.</p>

<div id="app">
    <div v-bind:style="{ fontSize: size + 'px' }">Text example</div>
    <div v-bind:style="{ fontSize2: size2 + 'px' }">Text example</div>
</div>

<script>
    const app = Vue.createApp({
        data() {
            return {
                size: 28,
                size2: 14
            }
        }
    })
    app.mount('#app')
</script>

</body>
</html>

=======================
v-bind background-color
=======================

<!DOCTYPE html>
<html>
<head>
    <title>v-bind background-color</title>
    <script src="vue/vue.global.js"></script>
    <style>
        #app > div {
            width: 200px;
            padding: 20px;
            border: dashed black 1px;
            background-color: lightcoral;
        }
    </style>
</head>
<body>

<h1>'v-bind' Background Color Example</h1>
<p>El navegador establece el color de fondo según el valor de 'bgVal' en la instancia de Vue.</p>

<div id="app">
    <div v-bind:style="{ backgroundColor: bgVal }">XXX.</div>
</div>

<script>
    const app = Vue.createApp({
        data() {
            return {
                bgVal: '#808080'
                // bgVal: 'red'
            }
        }
    })
    app.mount('#app')
</script>

</body>
</html>

====================================
v-bind background-color con ternario
====================================

<!DOCTYPE html>
<html>
<head>
    <title>v-bind background-color</title>
    <script src="vue/vue.global.js"></script>
    <style>
        #app > div {
        width: 200px;
        padding: 20px;
        border: dashed black 1px;
        }
    </style>
</head>
<body>

<h1>Example: 'v-bind' with Conditional Background Color</h1>

<p>
    El navegador establece el color de fondo con según el valor de
    'bgVal' en la instancia de Vue.
</p>

<div id="app">
    <div v-bind:style="{ backgroundColor: isImportant ? 'lightcoral' : 'lightgray' }">
        Importancia basada en el color de fondo.
    </div>
</div>

<script>
    const app = Vue.createApp({
        data() {
            return {
                isImportant: true
            }
        }
    })
    app.mount('#app')
</script>

</body>
</html>

========================================
v-bind' para cambiar la classe de un div
========================================

<!DOCTYPE html>
<html>
<head>
    <title>v-bind background-color</title>
    <script src="vue/vue.global.js"></script>
    <style>
            #app > div {
                width: 200px;
                padding: 20px;
                border: dashed black 1px;
            }
            .impClass {
                background-color: lightcoral;
            }
    </style>
</head>
<body>

<h1>Example: 'v-bind' used to change class.</h1>
<p>
    El navegador establece el nombre de la clase en el valor almacenado en la
    propiedad 'className' dentro de la instancia de Vue.
</p>

<div id="app">
    <div v-bind:class="className">
        XXX.
    </div>
</div>

<script>
    const app = Vue.createApp({
    data() {
            return {
                className: 'impClass'
            }
        }
    })
    app.mount('#app')
</script>

</body>
</html>

========================================
v-bind' para cambiar la classe de un div
========================================

<!DOCTYPE html>
<html>
<head>
    <title>v-bind background-color</title>
    <script src="vue/vue.global.js"></script>
    <style>
        #app > div {
            width: 200px;
            padding: 20px;
            border: dashed black 1px;
        }
        .myClass {
            background-color: lightcoral;
        }
        .myClass2 {
            background-color: red;
        }
    </style>
</head>
<body>

<h1>Example</h1>
<p>'v-bind' se utiliza para asignar clases con verdadero/falso.</p>
<p>El navegador establece la clase 'myClass' en la etiqueta div cuando se establece en 'true'.</p>

<div id="app">
    <div v-bind:class="{ myClass: true }">
        XXX
    </div>
    <div v-bind:class="{ myClass2: false }">
        yyy
    </div>
</div>

<script>
    const app = Vue.createApp({
        // The Vue instance is empty
    })
    app.mount('#app')
</script>

</body>
</html>

==========================================================================
v-bind' para cambiar la classe de un div en base al valor de una propiedad
==========================================================================

<!DOCTYPE html>
<html>
<head>
    <title>v-bind background-color</title>
    <script src="vue/vue.global.js"></script>
    <style>
        #app > div {
            width: 200px;
            padding: 20px;
            border: dashed black 1px;
        }
        .myClass {
            background-color: lightcoral;
        }
        .myClass2 {
            background-color: red;
        }
    </style>
</head>
<body>

<h1>Example: 'v-bind' used to change class dynamically.</h1>

<p>
    El navegador establece la clase 'myClass' en la etiqueta div si la propiedad
    'isImportant' es 'true'.
</p>

<div id="app">
    <div v-bind:class="{ myClass: isImportant }">
        XXX
    </div>
    <div v-bind:class="{ myClass2: !isImportant }">
        YYY
    </div>
</div>

<script>
    const app = Vue.createApp({
        data() {
            return {
                isImportant: true
            }
        }
    })
    app.mount('#app')
</script>

</body>
</html>

Shorthand de v-bind
===================

El shorthand de 'v-bind:' es solo ':'.

Ejemplo:

Here we just write ':' instead of 'v-bind:':

<div :class="{ impClass: isImportant }">
  The class is set conditionally to change the background color
</div>

=============
v-if y v-else
=============

<!DOCTYPE html>
<html>
<head>
    <title>Typewriters</title>
    <script src="vue/vue.global.js"></script>
    <style>
        #app {
            border: dashed black 1px;
            width: 130px;
            padding-left: 20px;
            font-weight: bold;
            background-color: lightgreen;
        }
    </style>
</head>
<body>

<h1>Example with 'v-if' and 'v-else'</h1>

<p>
    Intente cambiar el valor 'typewritersInStock' en la instancia de Vue de
    'verdadero' a 'falso' y ejecute el código nuevamente.
</p>

<div id="app">
    <p v-if="typewritersInStock">
        in stock
    </p>
    <p v-else>
        not in stock
    </p>
</div>

<script>
    const app = Vue.createApp({
        data() {
            return {
                typewritersInStock: true
            }
        }
    })
    app.mount('#app')
</script>

</body>
</html>

===========================================================
v-if v-else Mostrar texto en base al valor de una propiedad
===========================================================

<!DOCTYPE html>
<html>
<head>
    <title>My first Vue page</title>
    <script src="vue/vue.global.js"></script>
    <style>
        #app {
        border: dashed black 1px;
        width: 130px;
        padding-left: 20px;
        font-weight: bold;
        background-color: lightgreen;
        }
    </style>
</head>
<body>

<h1>Example with 'v-if' and 'v-else'</h1>

<p>
    Se mostrara el texto "in stock" si el valor de la propiedad typewriterCount
    es mayor que cero '0'.
</p>

<div id="app">
    <p v-if="typewriterCount>0">
        in stock
    </p>
    <p v-else>
        not in stock
    </p>
</div>

<script>
    const app = Vue.createApp({
        data() {
            return {
                typewriterCount: 1
            }
        }
    })
    app.mount('#app')
</script>

</body>
</html>

=====================================
Interpolación de texto con JavaScript
=====================================

También se pueden escribir expresiones simples de JavaScript dentro de las
llaves dobles {{ }}.

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>My first Vue page</title>
    <!--script src="https://unpkg.com/vue@3/dist/vue.global.js"></!--script-->
    <script src="../vue/vue.global.js"></script>
    <style>
        #app {
            display: inline-block;
            padding: 10px;
            font-size: x-large;
            background-color: lightgreen;
        }
    </style>
</head>
<body>
    <div id="app">
        {{ message }}
        <br>
        {{'Random number: ' + Math.ceil(Math.random()*6) }}
    </div>
    <script>
        const { createApp, ref } = Vue

        createApp({
            setup() {
                const message = ref('Hello world!')
                return {
                    message
                }
            }
        }).mount('#app')
    </script>
</body>
</html>

==========================================
Enviar data desde un formulario Login form
==========================================

<!DOCTYPE html>
<html>
<head>
    <title>Login form</title>
    <script src="../vue/vue.global.js"></script>
</head>
<body>
    <div id="app">
        <form method="post" @submit.prevent="login">
            <label class="label">Username</label>
            <input
                v-model="record.username"
                type="username"
                name="username"
            />
            <br>
            <label class="label">Password</label>
            <input
                v-model="record.password"
                type="password"
                name="password"
            />
            <br>
            <button type="submit">Log In</button>
        </form>
    </div>
    <script>
        const { createApp, ref } = Vue

        createApp({
            setup() {
                const record = ref({
                    username: '',
                    password: '',
                });

                const login = () => {
                    console.log(record.value.username);
                    console.log(record.value.password);
                }

                return {
                    login,
                    record
                }
            }
        }).mount('#app')
    </script>
</body>
</html>
