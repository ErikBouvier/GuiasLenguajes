=====================
Guía de Webpack by dM
=====================

webpack es un paquete de módulos de JavaScript de código abierto. Está hecho
principalmente para JavaScript, pero puede transformar activos de front-end como
HTML, CSS e imágenes si se incluyen los loaders correspondientes. Webpack toma
módulos con dependencias y genera archivos estáticos que representan esos
módulos.

Webpack toma las dependencias y genera un gráfico de dependencia que permite a
los desarrolladores de la web utilizar un enfoque modular para sus propósitos de
desarrollo de aplicaciones web. Se puede utilizar desde la línea de comandos, o
se puede configurar utilizando un archivo de configuración que se llama
webpack.config.js. Este archivo se utiliza para definir reglas, plugins, etc.
para un proyecto. (webpack es altamente extensible a través de reglas que
permiten a los desarrolladores escribir tareas personalizadas que quieren
realizar cuando se agrupan los archivos).

Node.js es necesario para usar el webpack.

Webpack es un sistema de bundling para preparar el desarrollo de una aplicación
web para producción. En cierta medida se puede considerar un Browserify
(Browserify es una herramienta de JavaScript de código abierto que permite a los
desarrolladores escribir módulos estilo Node.js que se compilan para su uso en
el navegador.) avanzado ya que tiene muchas opciones de configuración.

También se puede considerar una evolución de Grunt y Gulp, ya que permite de
alguna manera automatizar los procesos principales que son transpilar y
preprocesar código de .scss a .css, de ES7 a ES5/6, etc.

Para poder utilizar Webpack en tu proyecto web debes tener instalado Node.js en
tu equipo y con el siguiente comando tendrás Webpack instalado de forma global
en tu equipo (También puedes instalarlo a nivel de proyecto y correrlo con NPM
scripts).

-----

Instalar webpack de manera global

$ npm install -g webpack

-----

El comando más sencillo para realizar un bundle de tus archivos JavaScript es el
siguiente:

$ webpack ./index.js ./build/app.js

Este comando lo que hace es leer tu fichero index.js que sería el principal de
tu aplicación e importar todos los módulos que estén definidos y crear el
fichero de "producción" app.js en la carpeta build.

Por supuesto esto se puede complicar mucho más. En lugar de escribir todo como
comandos, podemos tener un fichero webpack.config.js donde escribamos toda la
configuración que necesitemos.

Webpack permite que trabajemos con cualquier tipo de archivo (CSS,
preprocesadores CSS, preprocesadores de JavaScript, imágenes, etc...) Con
indicarle que loader debe utilizar e instalarlo, nos es suficiente.

Gracias a esto podemos por ejemplo preprocesar el código JSX de nuestros
componentes de React facilmente. Veamos que fichero de configuración de Webpack
debemos escribir para ello y a continuación te explico cada línea:

// webpack.config.js
module.exports = {
  resolve: {
    extensions: ['', '.js', '.jsx']
  },
  context: __dirname,
  entry: {
    app: ['./index.jsx']
  },
  output: {
    path: './build',
    filename: 'app.js',
    publicPath: '/build/
  },
  module: {
    loaders: [
      {
        test: /(\.js|.jsx)$/,
        loader: 'babel',
        query: {
          presets: ['es2015', 'stage-2', 'react']
        }
      }
    ]
  }
}

El fichero exporta un objeto JavaScript con las siguientes configuraciones:

resolve: {
  extensions: ['', '.js', '.jsx']
},
context: __dirname

Con esto le indicamos a webpack que se fije en los ficheros con extensión .js y
.jsx desde el directorio en el que se encuentra el fichero webpack.config.js
hacia dentro. El resto los va ignorar en el proceso de bundling.

entry: {
  app: ['./index.jsx']
},

Aquí le indicamos que el punto de entrada desde el que debe empezar a leer y
realizar el proceso es el fichero index.jsx

output: {
  path: './build',
  filename: 'app.js',
  publicPath: '/build/
},

Con ésta configuración le estamos indicando donde ha de situarse el fichero de
salida, y será en la carpeta build con el nombre app.js. Si lo servimos desde un
servidor de desarrollo, la ruta pública será /build.

module: {
  loaders: [
    {
      test: /(\.js|.jsx)$/,
      loader: 'babel',
      query: {
        presets: ['es2015', 'stage-2', 'react']
      }
    }
  ]
}

Llegamos a la parte más interesante, los loaders. Aquí en el objeto loaders
podemos incluir tantos como queramos, dependiendo del tipo de archivo que
queramos modificar. Podemos tener un loader para ficheros JavaScript y JSX como
el ejemplo, podemos tener otro para ficheros de estilos y montar el CSS, podemos
tener otro para imágenes, etc...

En este caso le estamos indicando con la expresión regular /(\.js|.jsx)$/ que a
todos los ficheros con extensión .js y/o .jsx les pase el loader de Babel, que
instalaremos con el paquete de npm babel-loader. Además le añadimos unas
opciones de configuración a Babel con el objeto query. Le indicamos que utilice
el preset de es2015 para transpilar la sintaxis de JavaScript que aún no
soporten los browsers a la versión que si soportan, también el preset stage-2
que nos permite utilizar algunas cosas de la próxima versión de ECMAScript7, y
por último el preset react que permite el preprocesamiento de JSX a JavaScript.

Para poder utilizar estos presets debemos instalar los siguientes paquetes desde NPM:

$ npm install --save-dev babel-cli

$ npm install --save-dev babel-preset-es2015

$ npm install --save-dev babel-preset-stage-2

$ npm install --save-dev babel-preset-react

con esto, si corremos el comando webpack en nuestra terminal, tendremos el
fichero final en pocos segundos. Si creamos un npm script con el comando:

"scripts": {
  "build": "webpack --watch --colors"
}

Al correr npm run build tendremos ejecutando webpack en modo watch lo que
significa que a cada cambio que hagamos en nuestro código, webpack creará el
bundle de nuevo pero de una manera más rápida que por ejemplo con Browserify o
Gulp ya que lo mantiene en memoria. Y con el flag --colors vemos de una manera
más gráfica el resultado en la consola:

> webpack --watch --colors

Hash: 29e741b4cf44e481459f
Version: webpack 1.13.2
Time: 7316ms
 Asset    Size  Chunks             Chunk Names
app.js  751 kB       0  [emitted]  app
   [0] multi app 28 bytes {0} [built]
    + 172 hidden modules